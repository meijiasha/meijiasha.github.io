// import-csv-script.js

// DOM 元素
const csvFileInput = document.getElementById('csvFile');
const loadCsvHeadersBtn = document.getElementById('loadCsvHeadersBtn');
const fieldMappingSection = document.getElementById('fieldMappingSection');
const mappingTableBody = document.getElementById('mappingTableBody');
const processImportBtn = document.getElementById('processImportBtn');
const importStatusSection = document.getElementById('importStatusSection');
const importProgress = document.getElementById('importProgress').querySelector('.progress-bar');
const importLog = document.getElementById('importLog');
const backToListBtn = document.getElementById('backToListBtn');


// Firestore 目標欄位定義 (可以擴展)
const firestoreFields = [
    { id: 'name', label: '店家名稱', required: true },
    { id: 'district', label: '行政區', required: true },
    { id: 'category', label: '分類', required: true },
    { id: 'address', label: '地址', required: false },
    { id: 'price', label: '每人平均消費約', required: false },
    { id: 'description', label: '簡介', required: false },
    { id: 'place_id', label: 'Google Place ID', required: false },
    { id: 'latitude', label: '緯度 (Latitude)', required: false, isGeo: true }, // 標記為地理座標一部分
    { id: 'longitude', label: '經度 (Longitude)', required: false, isGeo: true } // 標記為地理座標一部分
];

let csvHeaders = []; // 儲存 CSV 檔案的標頭
let parsedCsvData = []; // 儲存解析後的 CSV 資料 (不含標頭)

// 檢查 Firebase 是否初始化
if (typeof auth === 'undefined' || typeof db === 'undefined' || !auth || !db) {
    console.error("CSV Import: Firebase instances not available.");
    importLog.innerHTML = "Firebase 初始化失敗，無法進行匯入。<br>";
    // 禁用所有按鈕
    if(loadCsvHeadersBtn) loadCsvHeadersBtn.disabled = true;
    if(processImportBtn) processImportBtn.disabled = true;
} else {
    auth.onAuthStateChanged(user => {
        if (!user) {
            alert("請先登入以使用批次匯入功能。");
            window.location.href = 'login.html';
        } else {
            console.log("CSV Import: User is logged in.");
        }
    });
}


// 載入並預覽 CSV 欄位按鈕事件
loadCsvHeadersBtn.addEventListener('click', () => {
    const file = csvFileInput.files[0];
    if (!file) {
        alert("請先選擇一個 CSV 檔案！");
        return;
    }

    fieldMappingSection.style.display = 'none';
    importStatusSection.style.display = 'none';
    mappingTableBody.innerHTML = ''; // 清空舊的對應
    processImportBtn.disabled = true;
    importLog.innerHTML = "正在解析 CSV 檔案...<br>";

    Papa.parse(file, {
        header: false, // 先不把第一行當標頭，手動取
        preview: 1,    // 只預覽第一行來獲取標頭
        skipEmptyLines: true,
        complete: function(results) {
            if (results.data && results.data.length > 0 && results.data[0].length > 0) {
                csvHeaders = results.data[0].map(header => header.trim()); // 清理標頭空白
                console.log("CSV Headers:", csvHeaders);
                importLog.innerHTML += "成功解析 CSV 標頭。<br>請進行欄位對應。<br>";
                renderFieldMappingTable();
                fieldMappingSection.style.display = 'block';
                // 解析完整數據以備後用
                parseFullCsvData(file);
            } else {
                alert("無法解析 CSV 標頭，請確認檔案格式正確且包含標頭行。");
                importLog.innerHTML += "<span class='text-danger'>無法解析 CSV 標頭。</span><br>";
            }
        },
        error: function(error) {
            console.error("PapaParse 讀取標頭錯誤:", error);
            alert("讀取 CSV 檔案標頭時發生錯誤：" + error.message);
            importLog.innerHTML += `<span class='text-danger'>讀取 CSV 檔案標頭時發生錯誤: ${error.message}</span><br>`;
        }
    });
});

// 解析完整的 CSV 資料
function parseFullCsvData(file) {
    Papa.parse(file, {
        header: true, // 現在使用標頭行來建立物件
        skipEmptyLines: true,
        dynamicTyping: true, // 嘗試自動轉換數字和布林值
        complete: function(results) {
            parsedCsvData = results.data;
            console.log("Parsed Full CSV Data:", parsedCsvData);
            if (results.errors.length > 0) {
                console.warn("CSV 解析時出現一些錯誤 (資料可能仍部分可用):", results.errors);
                importLog.innerHTML += `<span class='text-warning'>CSV 資料解析時出現警告，部分資料可能不完整。</span><br>`;
            }
            processImportBtn.disabled = false; // 在完整資料解析後才啟用匯入按鈕
        },
        error: function(error) {
            console.error("PapaParse 讀取完整資料錯誤:", error);
            alert("讀取 CSV 完整資料時發生錯誤：" + error.message);
            importLog.innerHTML += `<span class='text-danger'>讀取 CSV 完整資料時發生錯誤: ${error.message}</span><br>`;
            processImportBtn.disabled = true;
        }
    });
}


// 產生欄位對應表格
function renderFieldMappingTable() {
    mappingTableBody.innerHTML = ''; // 清空
    firestoreFields.forEach(fsField => {
        const row = mappingTableBody.insertRow();
        const cellFirestore = row.insertCell();
        const cellCsv = row.insertCell();

        cellFirestore.innerHTML = `${fsField.label} ${fsField.required ? '<span class="text-danger">*</span>' : ''}`;

        const select = document.createElement('select');
        select.classList.add('form-select', 'form-select-sm');
        select.id = `map_${fsField.id}`; // e.g., map_name, map_district

        // 加入一個 "不匯入" 的預設選項
        const defaultOption = document.createElement('option');
        defaultOption.value = ""; // 空值代表不對應
        defaultOption.textContent = "-- 不匯入此欄位 --";
        select.appendChild(defaultOption);

        csvHeaders.forEach(csvHeader => {
            const option = document.createElement('option');
            option.value = csvHeader;
            option.textContent = csvHeader;
            // 嘗試自動選擇 (如果名稱相似)
            if (fsField.label.includes(csvHeader) || fsField.id.toLowerCase() === csvHeader.toLowerCase()) {
                option.selected = true;
            }
            select.appendChild(option);
        });
        cellCsv.appendChild(select);
    });
}

// 開始匯入資料按鈕事件
processImportBtn.addEventListener('click', async () => {
    if (!db) {
        console.error("'db' is not available");
        alert("資料庫未連接，無法匯入。");
        return;
    }
    if (parsedCsvData.length === 0) {
        alert("沒有解析到有效的 CSV 資料可供匯入。");
        return;
    }

    processImportBtn.disabled = true;
    importStatusSection.style.display = 'block';
    importLog.innerHTML = "開始匯入程序...<br>";
    importProgress.style.width = '0%';
    importProgress.textContent = '0%';
    importProgress.parentElement.style.display = 'flex'; // 顯示進度條容器
    backToListBtn.style.display = 'none';


    const batch = db.batch();
    let successfulImports = 0;
    let failedImports = 0;
    const totalRows = parsedCsvData.length;

    // 獲取使用者設定的欄位對應關係
    const fieldMappings = {};
    firestoreFields.forEach(fsField => {
        const selectElement = document.getElementById(`map_${fsField.id}`);
        if (selectElement && selectElement.value) { // 只有當選擇了 CSV 欄位時才加入對應
            fieldMappings[fsField.id] = selectElement.value; // Firestore 欄位名 -> CSV 欄位名
        }
    });

    console.log("Field Mappings:", fieldMappings);
    importLog.innerHTML += `欄位對應設定: ${JSON.stringify(fieldMappings)}<br>`;


    for (let i = 0; i < totalRows; i++) {
        const row = parsedCsvData[i];
        const storeData = {};
        let skipRow = false;
        let rowErrors = [];

        // 根據對應關係組裝 storeData
        for (const fsFieldId in fieldMappings) {
            const csvHeaderName = fieldMappings[fsFieldId]; // 獲取對應的 CSV 欄位名
            if (row.hasOwnProperty(csvHeaderName)) {
                storeData[fsFieldId] = typeof row[csvHeaderName] === 'string' ? row[csvHeaderName].trim() : row[csvHeaderName];
            }
        }

        // 特殊處理經緯度，需要合併 latitude 和 longitude
        const latCsvHeader = fieldMappings['latitude'];
        const lngCsvHeader = fieldMappings['longitude'];
        let latVal, lngVal;

        if (latCsvHeader && row.hasOwnProperty(latCsvHeader)) {
            latVal = parseFloat(row[latCsvHeader]);
        }
        if (lngCsvHeader && row.hasOwnProperty(lngCsvHeader)) {
            lngVal = parseFloat(row[lngCsvHeader]);
        }

        // 只有當 latitude 和 longitude 都有對應且都是有效數字時才設定 location
        if (latCsvHeader && lngCsvHeader && !isNaN(latVal) && !isNaN(lngVal)) {
            storeData.location = new firebase.firestore.GeoPoint(latVal, lngVal);
        } else if (latCsvHeader || lngCsvHeader) { // 如果只對應了一個，或者值無效
            if ( (row[latCsvHeader] && String(row[latCsvHeader]).trim() !== '') ||
                 (row[lngCsvHeader] && String(row[lngCsvHeader]).trim() !== '') ) {
                 rowErrors.push("緯度和經度必須同時提供有效的數字才能設定位置。");
            }
            // 如果都為空，則不設定 location
        }


        // 進行必要的資料驗證 (基於 Firestore 欄位)
        firestoreFields.forEach(fsField => {
            if (fsField.required && (!storeData[fsField.id] || String(storeData[fsField.id]).trim() === '')) {
                rowErrors.push(`欄位 "${fsField.label}" 為必填。`);
                skipRow = true;
            }
        });

        if (skipRow || rowErrors.length > 0) {
            failedImports++;
            importLog.innerHTML += `<span class="text-danger">第 ${i + 1} 行資料錯誤: ${rowErrors.join(', ')} (原始資料: ${JSON.stringify(row).substring(0,100)}...)</span><br>`;
            updateProgressBar(i + 1, totalRows);
            continue; // 跳過此行
        }

        // 準備批次寫入
        const newStoreRef = db.collection('stores_taipei').doc(); // 自動產生 ID
        batch.set(newStoreRef, storeData);
        successfulImports++;
        importLog.innerHTML += `<span class="text-success">準備匯入第 ${i + 1} 行: ${storeData.name || '未知名稱'}</span><br>`;
        updateProgressBar(i + 1, totalRows);

        // Firestore 批次寫入有上限 (通常是 500)，如果資料量大需要分批提交
        if ((i + 1) % 490 === 0) { // 預留一些空間
            try {
                await batch.commit();
                importLog.innerHTML += `已提交一批 (${successfulImports} 筆成功) 資料到 Firestore...<br>`;
                // batch = db.batch(); // 重新初始化 batch (注意：這裡的 batch 應該是 const，所以要重新賦值)
                // 如果 batch 是 const，則不能重新賦值。需要將 batch.commit() 和重新初始化邏輯移出迴圈，
                // 或者在迴圈外定義一個可變的 batch 變數。
                // 為簡化，我們先假設資料量不大，一次提交。
                // 若資料量大，正確做法是:
                // let currentBatch = db.batch();
                // ... in loop: currentBatch.set(...)
                // if ((i + 1) % 490 === 0) { await currentBatch.commit(); currentBatch = db.batch(); }
                // ... after loop: if (any_remaining_ops) await currentBatch.commit();
            } catch (error) {
                console.error("批次提交 Firestore 失敗:", error);
                importLog.innerHTML += `<span class="text-danger">批次提交時發生錯誤: ${error.message}</span><br>`;
                // 這裡可能需要更複雜的錯誤處理，例如記錄哪些資料失敗
                failedImports += (i + 1) - successfulImports; // 假設這批都失敗了
                successfulImports = 0; // 重置計數器
            }
        }
    }

    // 提交最後一批 (如果有的話)
    try {
        if (successfulImports > 0 || (totalRows % 490 !== 0 && parsedCsvData.filter(row => !shouldSkip(row, fieldMappings)).length > 0 )) { // 檢查是否有操作在 batch 中
            // 這裡的檢查條件需要更精確，判斷 batch 是否真的有 set 操作
            // 簡單的判斷是，如果 successfulImports % 490 !=0 且 successfulImports > 0
             if (successfulImports > 0) { // 只有當成功準備的項目大於0才提交
                 await batch.commit();
                 importLog.innerHTML += `最後一批資料提交完成。<br>`;
             }
        }
        const finalMessage = `匯入完成！成功: ${successfulImports} 筆, 失敗: ${failedImports} 筆。<br>`;
        importLog.innerHTML += `<strong class="${failedImports > 0 ? 'text-warning' : 'text-success'}">${finalMessage}</strong>`;
        alert(finalMessage.replace(/<br>/g, '\n'));
        csvFileInput.value = ""; // 清空檔案選擇
        backToListBtn.style.display = 'inline-block';


    } catch (error) {
        console.error("最終提交 Firestore 失敗:", error);
        importLog.innerHTML += `<span class="text-danger">最終提交時發生錯誤: ${error.message}</span><br>`;
        alert("匯入過程中發生錯誤。");
    } finally {
        processImportBtn.disabled = false; // 重新啟用按鈕
        importProgress.parentElement.style.display = 'none'; // 隱藏進度條
    }
});

// 輔助函數：更新進度條
function updateProgressBar(current, total) {
    const percentage = Math.round((current / total) * 100);
    importProgress.style.width = percentage + '%';
    importProgress.textContent = percentage + '%';
    importProgress.setAttribute('aria-valuenow', percentage);
}

// 輔助函數：判斷是否應跳過某行 (用於最後提交檢查，可選)
function shouldSkip(row, fieldMappings) {
    let skip = false;
    let rowErrors = [];
     for (const fsField of firestoreFields) {
        if (fsField.required) {
            const csvHeaderName = fieldMappings[fsField.id];
            if (!csvHeaderName || !row.hasOwnProperty(csvHeaderName) || String(row[csvHeaderName]).trim() === '') {
                skip = true;
                break;
            }
        }
    }
    return skip;
}